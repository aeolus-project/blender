#!/usr/bin/python

from subprocess import call
import logging
import aeolus.common

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger()

# 1. Get aeolus files

# 2. Call Zephyrus on them

# 3. Unmerge solution files

# 4. Call METIS

import argparse

import os 

parser = argparse.ArgumentParser(prog='armonic-aeolus-unmerge')
parser.add_argument('-ic', '--input-configuration', type=str, required=True)
parser.add_argument('-spec', '--specification', type=str, required=True)
parser.add_argument('-w', '--workspace', type=str, required=True)

#parser.add_argument('-a', '--armonic-info', type=str, required=True)
#parser.add_argument('-o', '--output-directory', type=str, required=True)

args = parser.parse_args()

ZEPHYRUS_EXE = "zephyrus.native"
METIS_EXE = "metis.native"

directory_output = args.workspace

if not os.path.exists(directory_output):
    logger.info("*** Creating directory '%s' for output files..." % directory_output)
    os.makedirs(directory_output)
else:
    logger.info("*** Using directory '%s' for output files" % directory_output)

def check_exe(exe):
    ret = call(exe + " --help 2>&1 1>/dev/null", shell=True)
    if ret == 0:
        return
    elif ret == 127:
        logger.error("'%s' is not found" % exe)
        logger.error("Check if '%s' is in your PATH!" % exe)
        exit(1)
    else:
        logger.error("Unknown error with '%s'!" % exe)

check_exe(ZEPHYRUS_EXE)
check_exe(METIS_EXE)

file_input_configuration = args.input_configuration
file_specification = args.specification

file_armonic_info = directory_output + aeolus.common.FILE_ARMONIC_INFO
file_universe = directory_output + aeolus.common.FILE_UNIVERSE_UNMERGED
file_universe_merged = directory_output + aeolus.common.FILE_UNIVERSE_MERGED

file_output_zephyrus = directory_output + "/configuration-zephyrus.json"
file_output_zephyrus_dot = directory_output + "/configuration-zephyrus.dot"
file_output_unmerged = directory_output + "/configuration-unmerged.json"
file_output_metis = directory_output + "/plan-metis.log"
file_output_metis_abstract_plan = directory_output + "/abstract-plan-metis.dot"
file_output_metis_json = directory_output + aeolus.common.FILE_METIS_PLAN_JSON
file_output_replay = directory_output + "/replay.json"


# ZEPHYRUS PART
logger.info("*** Processing files with Zephyrus...")

cmd = [ZEPHYRUS_EXE, "-solver", "g12",
#       "-settings", file_zephyrus_settings,
       "-u", file_universe_merged,
       "-ic", file_input_configuration,
       "-spec", file_specification,
       "-opt", "compact",
       "-out stateful-json-v1 %s" % file_output_zephyrus,
       "-out graph-deployment %s" % file_output_zephyrus_dot,
       '-stateful', 'on'
]

logger.info("Calling Zepyrus...")
logger.debug(" ".join(cmd))

ret = call(" ".join(cmd), shell=True)
if ret != 0:
    logger.error("%s failed. Aborting..." % ZEPHYRUS_EXE)
    exit(ret)

logger.info("Zephyrus configuration file saved to '%s'" % file_output_zephyrus)
logger.info("Zephyrus dot file saved to '%s'" % file_output_zephyrus_dot)


# UNMERGING PART
logger.info("*** Unmerge files generated by Zephyrus...")

import json
with open(file_output_zephyrus, 'r') as f:
    universe_merged = json.load(f)
with open(file_armonic_info, 'r') as f:
    j = json.load(f)
    merge = j['merge']
    local = j['local']

import aeolus.unmerge
universe_unmerged = aeolus.unmerge.unmerge(universe_merged, merge, local)
with open(file_output_unmerged, 'w') as f:
    json.dump(universe_unmerged, f, indent=2)
    logger.info("Unmerged configuration file saved to '%s'" % file_output_unmerged)

# METIS PART
logger.info("*** Processing files with METIS...")
cmd = [METIS_EXE,
       "-u", file_universe,
       "-conf", file_output_unmerged,
       "-ap", file_output_metis_abstract_plan,
       "-o", file_output_metis,
       "-m", "> /dev/null",
   ]

logger.info("Calling Metis...")
logger.debug(" ".join(cmd))

ret = call(" ".join(cmd), shell=True)
if ret != 0:
    logger.error("%s failed. Aborting..." % METIS_EXE)
    exit(ret)

logger.info("Metis configuration file saved to '%s'" % file_output_metis)
logger.info("Metis abstract plan (dot file) saved to '%s'" % file_output_metis_abstract_plan)


# Transform Metis output to JSON
logger.info("Transform Metis output to JSON...")
import aeolus.metis_plan

j = aeolus.metis_plan.plan_to_json(file_output_metis)
with open(file_output_metis_json, 'w') as f:
    merge = json.dump(j, f, indent=2)
logger.info("Metis configuration JSON file saved to '%s'" % file_output_metis_json)


# Generate Armonic Replay file
import aeolus.armonic_replay
logger.info("Generating Armonic Replay file...")

with open(file_output_unmerged, 'r') as f:
    configuration = json.load(f)

with open(file_armonic_info, 'r') as f:
    armonic_info = json.load(f)

replay = aeolus.armonic_replay.generate_replay(configuration, armonic_info)
with open(file_output_replay, 'w') as f:
    json.dump(replay, f, indent=2)

logger.info("Armonic Replay file generated in '%s'" % file_output_replay)
