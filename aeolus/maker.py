import logging
from subprocess import call
import common
import os
import json

logger = logging.getLogger()

ZEPHYRUS_EXE = "zephyrus.native"
METIS_EXE = "metis.native"

# The Jacopo binding optimizer comes from the aeolus-utils repository
JACOPO_BIND_OPTIMIZER_EXE = "bindings_opt.py"


def run(workspace, input_configuration, specification):
    if not workspace.endswith("/"):
        workspace = workspace + "/"

    if not os.path.exists(workspace):
        logger.info("*** Creating directory '%s' for output files..." % workspace)
        os.makedirs(workspace)
    else:
        logger.info("*** Using directory '%s' for output files" % workspace)

    def check_exe(exe):
        ret = call(exe + " --help 2>&1 1>/dev/null", shell=True)
        if ret == 0:
            return
        elif ret == 127:
            logger.error("'%s' is not found" % exe)
            logger.error("Check if '%s' is in your PATH!" % exe)
            exit(1)
        else:
            logger.error("Unknown error with '%s'!" % exe)

    check_exe(ZEPHYRUS_EXE)
    check_exe(METIS_EXE)
    check_exe(JACOPO_BIND_OPTIMIZER_EXE)

    file_input_configuration = input_configuration
    file_specification = specification

    file_armonic_info = workspace + common.FILE_ARMONIC_INFO
    file_universe = workspace + common.FILE_UNIVERSE_UNMERGED
    file_universe_merged = workspace + common.FILE_UNIVERSE_MERGED

    file_output_zephyrus = workspace + "/" + common.FILE_ZEPHYRUS_OUTPUT_JSON
    file_output_zephyrus_dot = workspace + "/configuration-zephyrus.dot"
    file_output_unmerged = workspace + "/" + common.FILE_CONFIGURATION_UNMERGED
    file_output_metis = workspace + "/plan-metis.log"
    file_output_metis_abstract_plan = workspace + "/abstract-plan-metis.dot"
    file_output_metis_json = workspace + common.FILE_METIS_PLAN_JSON
    file_output_replay = workspace + "/replay.json"

    file_configuration_optimized = workspace + "/" + common.FILE_CONFIGURATION_OPTIMIZED

    # ZEPHYRUS PART
    logger.info("*** Processing files with Zephyrus...")

    cmd = [ZEPHYRUS_EXE, "-solver", "g12",
    #       "-settings", file_zephyrus_settings,
           "-u", file_universe,
           "-ic", file_input_configuration,
           "-spec", file_specification,
           "-opt", "compact",
           "-out stateful-json-v1 %s" % file_output_zephyrus,
           "-out graph-deployment %s" % file_output_zephyrus_dot,
           '-stateful', 'on'
    ]

    logger.info("Calling Zepyrus...")
    logger.debug(" ".join(cmd))

    ret = call(" ".join(cmd), shell=True)
    if ret != 0:
        logger.error("%s failed. Aborting..." % ZEPHYRUS_EXE)
        exit(ret)

    logger.info("Zephyrus configuration file saved to '%s'" % file_output_zephyrus)
    logger.info("Zephyrus dot file saved to '%s'" % file_output_zephyrus_dot)

    # UNMERGING PART
    logger.info("*** Unmerge files generated by Zephyrus...")

    import json
    with open(file_output_zephyrus, 'r') as f:
        universe_merged = json.load(f)
    with open(file_armonic_info, 'r') as f:
        j = json.load(f)
        merge = j['merge']
        local = j['local']

    import aeolus.unmerge
    universe_unmerged = aeolus.unmerge.unmerge(universe_merged, merge, local)
    with open(file_output_unmerged, 'w') as f:
        json.dump(universe_unmerged, f, indent=2)
        logger.info("Unmerged configuration file saved to '%s'" % file_output_unmerged)

    # JACOPO BIND OPTIMIZER PART
    logger.info("*** Optimizing bindings...")

    cmd = [JACOPO_BIND_OPTIMIZER_EXE,
           "-i", file_output_unmerged,
           "-o", file_configuration_optimized
    ]

    logger.info("Calling bindings optimizer...")
    logger.debug(" ".join(cmd))

    ret = call(" ".join(cmd), shell=True)
    if ret != 0:
        logger.error("%s failed. Aborting..." % ZEPHYRUS_EXE)
        exit(ret)

    logger.info("Optimized configuration file saved to '%s'" % file_configuration_optimized)


    # METIS PART
    logger.info("*** Processing files with METIS...")
    cmd = [METIS_EXE,
           "-u", file_universe,
           "-conf", file_configuration_optimized,
           "-ap", file_output_metis_abstract_plan,
           "-o", file_output_metis,
           "-m", "> /dev/null",
       ]

    logger.info("Calling Metis...")
    logger.debug(" ".join(cmd))

    ret = call(" ".join(cmd), shell=True)
    if ret != 0:
        logger.error("%s failed. Aborting..." % METIS_EXE)
        exit(ret)

    logger.info("Metis configuration file saved to '%s'" % file_output_metis)
    logger.info("Metis abstract plan (dot file) saved to '%s'" % file_output_metis_abstract_plan)


    # Transform Metis output to JSON
    logger.info("Transform Metis output to JSON...")
    import aeolus.metis_plan

    j = aeolus.metis_plan.plan_to_json(file_output_metis)
    with open(file_output_metis_json, 'w') as f:
        merge = json.dump(j, f, indent=2)
    logger.info("Metis configuration JSON file saved to '%s'" % file_output_metis_json)


    # Generate Armonic Replay file
    import aeolus.armonic_replay
    logger.info("Generating Armonic Replay file...")

    with open(file_output_unmerged, 'r') as f:
        configuration = json.load(f)

    with open(file_armonic_info, 'r') as f:
        armonic_info = json.load(f)

    replay = aeolus.armonic_replay.generate_replay(configuration, armonic_info)
    with open(file_output_replay, 'w') as f:
        json.dump(replay, f, indent=2)

    logger.info("Armonic Replay file generated in '%s'" % file_output_replay)
